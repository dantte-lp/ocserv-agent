name: Security

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

permissions:
  contents: read

jobs:
  # Go security scanning with gosec
  gosec:
    name: Go Security Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run Gosec Security Scanner
        run: |
          # Run native gosec installed in runner
          gosec -no-fail -fmt sarif -out results.sarif ./...

          # Remove problematic 'fixes' field from SARIF that causes upload errors
          # Gosec generates invalid artifactChanges format in fixes field
          jq 'walk(if type == "object" then del(.fixes) else . end)' results.sarif > results-fixed.sarif
          mv results-fixed.sarif results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Semgrep SAST (Static Application Security Testing)
  semgrep:
    name: Semgrep Security Analysis
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          # Run semgrep with Go security rules
          semgrep scan \
            --config auto \
            --config p/golang \
            --config p/security-audit \
            --config p/secrets \
            --sarif \
            --output semgrep-results.sarif \
            .
        continue-on-error: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

  # Dependency vulnerability scanning
  govulncheck:
    name: Go Vulnerability Check
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run govulncheck
        run: govulncheck ./...

  # Nancy - Go dependency vulnerability scanner (OSS Index)
  nancy:
    name: Nancy Dependency Scanner
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run Nancy
        run: |
          go list -json -deps ./... | nancy sleuth
        continue-on-error: true

  # OSV-Scanner - Multi-ecosystem vulnerability scanning
  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OSV-Scanner
        run: |
          # Scan all supported package files and lock files
          osv-scanner scan \
            --format sarif \
            --output osv-results.sarif \
            --recursive \
            .
        continue-on-error: true

      - name: Upload OSV-Scanner results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv-results.sarif

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Trivy vulnerability scanner
  trivy:
    name: Trivy Security Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        run: |
          # Run native trivy installed in runner
          trivy fs \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH \
            .

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # OSSF Scorecard
  scorecard:
    name: OSSF Scorecard
    runs-on: self-hosted
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run OSSF Scorecard
        run: |
          # Run native scorecard installed in runner
          scorecard \
            --repo=github.com/${{ github.repository }} \
            --format=sarif \
            --output-file=results.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Gitleaks - Secret scanning (fast and lightweight)
  gitleaks:
    name: Gitleaks Secret Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: Run Gitleaks
        run: |
          # Scan entire git history for secrets
          gitleaks detect \
            --source . \
            --report-format sarif \
            --report-path gitleaks-results.sarif \
            --verbose
        continue-on-error: true

      - name: Upload Gitleaks results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-results.sarif
          category: gitleaks

  # TruffleHog - Secret scanning with verification
  trufflehog:
    name: TruffleHog Secret Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        run: |
          # Scan git history with verification
          trufflehog git file://. \
            --only-verified \
            --json \
            > trufflehog-results.json || true

          # Count findings
          if [ -s trufflehog-results.json ]; then
            echo "⚠️ TruffleHog found verified secrets!"
            cat trufflehog-results.json
            exit 1
          else
            echo "✅ No verified secrets found"
          fi
        continue-on-error: true

  # License compliance scanning
  license-compliance:
    name: License Compliance Check
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Check Go module licenses
        run: |
          echo "📋 Analyzing licenses with go-licenses..."
          go-licenses report ./... > licenses-report.txt

          echo ""
          echo "📊 License Summary:"
          go-licenses csv ./... | cut -d',' -f3 | sort | uniq -c | sort -rn

          echo ""
          echo "🔍 Checking for restricted licenses..."
          # Check for GPL and other copyleft licenses
          if go-licenses csv ./... | grep -iE 'GPL|AGPL|LGPL'; then
            echo "⚠️ Warning: Found copyleft licenses"
          fi

      - name: Generate SBOM with license info
        run: |
          echo "📦 Generating SBOM with license information..."
          syft . -o json=sbom-licenses.json
          syft . -o spdx-json=sbom-spdx.json

          echo "✅ SBOM files generated with license data"

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-reports
          path: |
            licenses-report.txt
            sbom-licenses.json
            sbom-spdx.json
          retention-days: 30
