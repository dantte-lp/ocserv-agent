name: Security

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

permissions:
  contents: read

jobs:
  # Go security scanning with gosec
  gosec:
    name: Go Security Scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Fix Gosec SARIF format
        run: |
          # Remove problematic 'fixes' field from SARIF that causes upload errors
          # Gosec generates invalid artifactChanges format in fixes field
          jq 'walk(if type == "object" then del(.fixes) else . end)' results.sarif > results-fixed.sarif
          mv results-fixed.sarif results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Dependency vulnerability scanning
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Trivy vulnerability scanner
  trivy:
    name: Trivy Security Scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (repo)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # OSSF Scorecard
  scorecard:
    name: OSSF Scorecard
    runs-on: self-hosted
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run native scorecard
        continue-on-error: true  # May fail due to token permissions for branch protection
        run: |
          # Use native scorecard installed in runner
          # SARIF format not supported by native scorecard, use JSON instead
          scorecard \
            --repo=github.com/dantte-lp/ocserv-agent \
            --format=json \
            --show-details > scorecard-results.json || {
            echo "âš  Scorecard failed (may be due to token permissions)"
            echo "{\"checks\": []}" > scorecard-results.json
          }

          # Display results summary if available
          if [ -s scorecard-results.json ]; then
            echo "OSSF Scorecard Results:"
            cat scorecard-results.json | jq -r '.checks[]? | "\(.name): \(.score)/10"' 2>/dev/null || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate scorecard HTML report
        if: always()
        run: |
          # Generate simple HTML visualization from JSON results
          cat > scorecard-report.html <<'HTML_EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>OSSF Scorecard Report - ocserv-agent</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; margin: 40px; background: #f5f5f5; }
              .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
              h1 { color: #24292e; border-bottom: 2px solid #e1e4e8; padding-bottom: 15px; }
              .meta { color: #586069; font-size: 14px; margin-bottom: 20px; }
              .score-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px; margin-top: 20px; }
              .check-card { border: 1px solid #e1e4e8; border-radius: 6px; padding: 15px; background: #fafbfc; }
              .check-name { font-weight: 600; font-size: 16px; color: #24292e; margin-bottom: 8px; }
              .check-score { font-size: 24px; font-weight: bold; }
              .score-10 { color: #28a745; }
              .score-8-9 { color: #85e89d; }
              .score-5-7 { color: #ffd33d; }
              .score-1-4 { color: #f97583; }
              .score-0 { color: #d73a49; }
              .check-reason { font-size: 13px; color: #586069; margin-top: 8px; }
              .links { margin-top: 30px; padding-top: 20px; border-top: 1px solid #e1e4e8; }
              .links a { color: #0366d6; text-decoration: none; margin-right: 15px; }
              .links a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>OSSF Scorecard Report</h1>
              <div class="meta">
                <strong>Repository:</strong> dantte-lp/ocserv-agent<br>
                <strong>Generated:</strong> <span id="date"></span>
              </div>
              <div class="score-grid" id="checks"></div>
              <div class="links">
                <strong>View Interactive Visualization:</strong><br>
                <a href="https://ossf.github.io/scorecard-visualizer/#/projects/github.com/dantte-lp/ocserv-agent" target="_blank">
                  OSSF Scorecard Visualizer
                </a>
                <a href="https://github.com/dantte-lp/ocserv-agent/security" target="_blank">
                  Repository Security
                </a>
              </div>
            </div>
            <script>
              document.getElementById('date').textContent = new Date().toLocaleString();

              fetch('scorecard-results.json')
                .then(r => r.json())
                .then(data => {
                  const checks = data.checks || [];
                  const container = document.getElementById('checks');

                  checks.sort((a, b) => b.score - a.score).forEach(check => {
                    const score = check.score;
                    const scoreClass = score === 10 ? 'score-10' :
                                      score >= 8 ? 'score-8-9' :
                                      score >= 5 ? 'score-5-7' :
                                      score >= 1 ? 'score-1-4' : 'score-0';

                    const card = document.createElement('div');
                    card.className = 'check-card';
                    card.innerHTML = `
                      <div class="check-name">${check.name}</div>
                      <div class="check-score ${scoreClass}">${score}/10</div>
                      <div class="check-reason">${check.reason || ''}</div>
                    `;
                    container.appendChild(card);
                  });
                })
                .catch(e => {
                  document.getElementById('checks').innerHTML =
                    '<p>No scorecard data available. The scan may have failed due to permissions.</p>';
                });
            </script>
          </body>
          </html>
          HTML_EOF

          echo "âœ“ Generated scorecard HTML report"

      - name: Upload scorecard results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scorecard-results
          path: |
            scorecard-results.json
            scorecard-report.html
          if-no-files-found: ignore
