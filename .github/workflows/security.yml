name: Security

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
      - '!.github/workflows/**'
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'

permissions:
  contents: read

jobs:
  # Go security scanning with gosec
  gosec:
    name: Go Security Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run Gosec Security Scanner
        run: |
          # Run native gosec installed in runner
          gosec -no-fail -fmt sarif -out results.sarif ./...

          # Remove problematic 'fixes' field from SARIF that causes upload errors
          # Gosec generates invalid artifactChanges format in fixes field
          jq 'walk(if type == "object" then del(.fixes) else . end)' results.sarif > results-fixed.sarif
          mv results-fixed.sarif results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Dependency vulnerability scanning
  govulncheck:
    name: Go Vulnerability Check
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  # OSV-Scanner - Multi-ecosystem vulnerability scanning
  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OSV-Scanner
        run: |
          # Scan all supported package files and lock files
          osv-scanner scan \
            --format sarif \
            --output osv-results.sarif \
            --recursive \
            .
        continue-on-error: true

      - name: Upload OSV-Scanner results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv-results.sarif

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Trivy vulnerability scanner
  trivy:
    name: Trivy Security Scanner
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        run: |
          # Run native trivy installed in runner
          trivy fs \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH \
            .

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # OSSF Scorecard
  scorecard:
    name: OSSF Scorecard
    runs-on: self-hosted
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run OSSF Scorecard
        run: |
          # Run native scorecard installed in runner
          scorecard \
            --repo=github.com/${{ github.repository }} \
            --format=sarif \
            --output-file=results.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
