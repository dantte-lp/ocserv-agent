name: Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: read

jobs:
  # Go code linting - only run when Go files change
  golangci:
    name: golangci-lint
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: read
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.changed_files, '.go') ||
       contains(github.event.pull_request.changed_files, 'go.mod') ||
       contains(github.event.pull_request.changed_files, 'go.sum') ||
       contains(github.event.pull_request.changed_files, '.proto'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Go files
        id: check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}... 2>/dev/null | grep -E '\.(go|proto)$|go\.(mod|sum)$'; then
            echo "has_go_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_go_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        if: steps.check.outputs.has_go_files == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: false

      - name: Generate protobuf code
        if: steps.check.outputs.has_go_files == 'true'
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Run golangci-lint
        if: steps.check.outputs.has_go_files == 'true'
        run: |
          # Run golangci-lint installed in runner
          golangci-lint run \
            --timeout=5m \
            --out-format colored-line-number \
            ./...

  # Markdown linting - only run when .md files change
  markdown:
    name: Markdown lint
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Markdown files
        id: check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}... 2>/dev/null | grep -E '\.md$'; then
            echo "has_md_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_md_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Lint markdown files
        if: steps.check.outputs.has_md_files == 'true'
        run: |
          # Run markdownlint-cli installed in runner
          markdownlint '**/*.md' --ignore vendor --ignore node_modules

  # YAML linting - only run when .yml/.yaml files change
  yaml:
    name: YAML lint
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for YAML files
        id: check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}... 2>/dev/null | grep -E '\.(yml|yaml)$'; then
            echo "has_yaml_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_yaml_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Lint YAML files
        if: steps.check.outputs.has_yaml_files == 'true'
        run: |
          # Run yamllint installed in runner
          yamllint -c .yamllint.yml -s .

  # Dockerfile linting - only run when Dockerfile changes
  dockerfile:
    name: Dockerfile lint
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: check
        run: |
          if git diff --name-only origin/${{ github.base_ref }}... 2>/dev/null | grep -E '^Dockerfile'; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
          fi

      - name: Lint Dockerfile
        if: steps.check.outputs.has_dockerfile == 'true'
        run: |
          # Run hadolint installed in runner
          hadolint --failure-threshold warning Dockerfile
