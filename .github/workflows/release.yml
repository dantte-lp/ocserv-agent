name: Release with SLSA

on:
  push:
    tags:
      - 'v*.*.*'

permissions: {}  # No default permissions - each job declares its own

jobs:
  build-artifacts:
    runs-on: self-hosted
    permissions:
      contents: read
      actions: write  # For artifact upload
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate protobuf code
        run: |
          protoc --go_out=. --go-grpc_out=. \
            --go_opt=paths=source_relative \
            --go-grpc_opt=paths=source_relative \
            pkg/proto/agent/v1/agent.proto

      - name: Build and package binaries
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          # Build for multiple platforms
          # Format: OS/ARCH
          PLATFORMS=(
            "linux/amd64"
            "linux/arm64"
            "freebsd/amd64"
            "freebsd/arm64"
          )

          mkdir -p dist

          for PLATFORM in "${PLATFORMS[@]}"; do
            GOOS=${PLATFORM%/*}
            GOARCH=${PLATFORM#*/}

            # Archive name includes version and platform
            # Format: ocserv-agent-v0.2.1-linux-amd64.tar.gz
            ARCHIVE_NAME="ocserv-agent-${VERSION}-${GOOS}-${GOARCH}"

            # Binary inside archive is always named 'ocserv-agent'
            BINARY_NAME="ocserv-agent"

            echo "Building ${ARCHIVE_NAME}.tar.gz..."

            # Build binary
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH \
              go build -trimpath \
              -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${GITHUB_SHA} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -o "${BINARY_NAME}" \
              ./cmd/agent

            # Create tar.gz archive with binary named 'ocserv-agent'
            tar -czf "dist/${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"

            # Create checksum for archive
            sha256sum "dist/${ARCHIVE_NAME}.tar.gz" > "dist/${ARCHIVE_NAME}.tar.gz.sha256"

            # Cleanup binary
            rm "${BINARY_NAME}"

            echo "âœ… Created dist/${ARCHIVE_NAME}.tar.gz"
          done

          # List created files
          ls -lh dist/

      - name: Generate hashes for provenance
        id: hash
        run: |
          cd dist
          echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/*
          if-no-files-found: error

  # Generate SLSA provenance for secure builds
  build:
    needs: [build-artifacts]
    permissions:
      id-token: write
      contents: write
      actions: read
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build-artifacts.outputs.hashes }}"
      upload-assets: true

  # Create GitHub Release
  release:
    needs: [build-artifacts, build]
    runs-on: self-hosted
    permissions:
      contents: write
      actions: read  # For artifact download

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist/

      - name: Download provenance
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.provenance-name }}

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Read release notes
        id: release_notes
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if [ -f "docs/releases/${VERSION}.md" ]; then
            cat "docs/releases/${VERSION}.md" > release_notes.md
          else
            echo "Release ${VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "See CHANGELOG for details." >> release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.md
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container image build and push
  container:
    needs: build-artifacts
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
