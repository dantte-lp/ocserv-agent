version: '3.8'

services:
  # ═══════════════════════════════════════════════
  # Proto Generation
  # ═══════════════════════════════════════════════
  proto-gen:
    image: golang:1.25-trixie
    container_name: proto-gen
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
    command: |
      sh -c '
        echo "🔧 Installing protoc..."
        apt-get update && apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        echo "📦 Generating protobuf code..."
        protoc --go_out=. --go-grpc_out=. \
          --go_opt=paths=source_relative \
          --go-grpc_opt=paths=source_relative \
          pkg/proto/agent/v1/agent.proto

        echo "✅ Proto generation completed!"
      '

  # ═══════════════════════════════════════════════
  # Multi-arch Build
  # ═══════════════════════════════════════════════
  build-linux-amd64:
    image: golang:1.25-trixie
    container_name: build-amd64
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
      - go-build-cache:/root/.cache/go-build
    environment:
      - CGO_ENABLED=0
      - GOOS=linux
      - GOARCH=amd64
      - VERSION=${VERSION:-dev}
    command: |
      sh -c '
        echo "🔨 Building for linux/amd64..."
        go build -ldflags="-s -w -X main.version=${VERSION}" \
          -o bin/ocserv-agent-linux-amd64 \
          ./cmd/agent || echo "Build failed (expected if cmd/agent/main.go does not exist yet)"
        echo "✅ Built: bin/ocserv-agent-linux-amd64"
      '
    depends_on:
      - proto-gen

  build-linux-arm64:
    image: golang:1.25-trixie
    container_name: build-arm64
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
      - go-build-cache:/root/.cache/go-build
    environment:
      - CGO_ENABLED=0
      - GOOS=linux
      - GOARCH=arm64
      - VERSION=${VERSION:-dev}
    command: |
      sh -c '
        echo "🔨 Building for linux/arm64..."
        go build -ldflags="-s -w -X main.version=${VERSION}" \
          -o bin/ocserv-agent-linux-arm64 \
          ./cmd/agent || echo "Build failed (expected if cmd/agent/main.go does not exist yet)"
        echo "✅ Built: bin/ocserv-agent-linux-arm64"
      '
    depends_on:
      - proto-gen

  # ═══════════════════════════════════════════════
  # Build Production Docker Image
  # ═══════════════════════════════════════════════
  build-image:
    image: quay.io/podman/stable
    container_name: build-image
    privileged: true
    volumes:
      - ../../:/workspace:z
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    environment:
      - VERSION=${VERSION:-latest}
    command: |
      sh -c '
        echo "🐳 Building Docker image..."
        podman build \
          --tag ocserv-agent:${VERSION} \
          --tag ocserv-agent:latest \
          -f Dockerfile . || echo "Docker build failed (expected if Dockerfile incomplete)"

        echo "✅ Image built: ocserv-agent:${VERSION}"
        podman images | grep ocserv-agent || true
      '
    depends_on:
      - build-linux-amd64

volumes:
  go-build-cache:
