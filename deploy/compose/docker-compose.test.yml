version: '3.8'

services:
  # ═══════════════════════════════════════════════
  # Test Runner
  # ═══════════════════════════════════════════════
  test:
    image: golang:1.25-trixie
    container_name: ocserv-agent-test
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
      - go-test-cache:/go/pkg
      # Share mock socket volume for integration tests
      - mock-socket:/var/run:z
      - ../../test/fixtures:/fixtures:ro,z
    environment:
      - CGO_ENABLED=0
      - GOCOVERDIR=/workspace/coverage
    command: |
      sh -c '
        echo "🧪 Running tests..."

        # Unit tests
        echo "▶ Unit tests"
        go test -v -coverprofile=coverage.out ./... || exit 1

        # Coverage report
        echo "▶ Coverage report"
        go tool cover -func=coverage.out
        go tool cover -html=coverage.out -o coverage.html

        # Wait for mock socket to be ready
        echo "▶ Waiting for mock socket..."
        timeout=30
        while [ ! -S /var/run/occtl.socket ] && [ $timeout -gt 0 ]; do
          echo "  Waiting for socket... ($timeout)"
          sleep 1
          timeout=$((timeout-1))
        done

        if [ ! -S /var/run/occtl.socket ]; then
          echo "❌ Mock socket not ready after 30 seconds"
          exit 1
        fi

        echo "✅ Mock socket ready"

        # Integration tests
        echo "▶ Integration tests (occtl)"
        go test -v -tags=integration -count=1 ./internal/ocserv/... || exit 1

        echo "✅ All tests passed!"
      '
    networks:
      - test-net
    depends_on:
      mock-ocserv:
        condition: service_healthy

  # ═══════════════════════════════════════════════
  # Lint & Static Analysis
  # ═══════════════════════════════════════════════
  lint:
    image: golangci/golangci-lint:v1.63-alpine
    container_name: ocserv-agent-lint
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
      - golangci-cache:/root/.cache
    command: |
      sh -c '
        echo "🔍 Running linters..."
        golangci-lint run --timeout 5m ./... || echo "Lint errors found (may be expected in early development)"
        echo "✅ Linting completed!"
      '

  # ═══════════════════════════════════════════════
  # Security Scan
  # ═══════════════════════════════════════════════
  security:
    image: golang:1.25-trixie
    container_name: ocserv-agent-security
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
    command: |
      sh -c '
        echo "🔒 Running security scans..."

        # govulncheck
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found or no code to scan yet"

        # gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt=json -out=security-report.json ./... || echo "Security issues found or no code to scan yet"

        echo "✅ Security scan completed!"
      '

  # Mock services для тестов
  mock-control-server:
    image: golang:1.25-trixie
    working_dir: /workspace
    volumes:
      - ../../:/workspace:z
    command: sh -c 'cd test/mock-server && go run main.go || sleep infinity'
    networks:
      - test-net

  # Mock ocserv Unix socket server for integration tests
  mock-ocserv:
    build:
      context: ../../
      dockerfile: test/mock-ocserv/Dockerfile
    container_name: ocserv-agent-mock-ocserv
    image: ocserv-agent-mock-ocserv:latest
    volumes:
      - ../../test/fixtures:/fixtures:ro,z
      # Share socket with test container
      - mock-socket:/var/run:z
    environment:
      - SOCKET_PATH=/var/run/occtl.socket
      - FIXTURES_PATH=/fixtures/ocserv/occtl
    command: ["-socket", "/var/run/occtl.socket", "-fixtures", "/fixtures/ocserv/occtl", "-verbose"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "test", "-S", "/var/run/occtl.socket"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - test-net

networks:
  test-net:
    driver: bridge

volumes:
  go-test-cache:
  golangci-cache:
  mock-socket:
    driver: local
